using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RandomVariablesLibraryNew
{
    public static class IntegralCalculator
    {
        /// <summary>
        /// Вычисляет интеграл функции на заданном интервале.
        /// </summary>
        /// <param name="from">Начало интервала интегрирования</param>
        /// <param name="to">Конец интервала интегрирования</param>
        /// <param name="integrand">Подынтегральная функция</param>
        /// <returns></returns>
        public static double Integrate(double from, double to, Func<double, double> integrand)
        {
            var integralValue = default(double);

            // конечный интервал [a,b]
            var isDefiniteIntegral = !double.IsInfinity(from) && !double.IsInfinity(to);
            if (isDefiniteIntegral)
            {
                integralValue = IntegrateByGaussLegendreQuadrature(from, to, integrand);
            }

            // интервал (-inf; b], [a; +inf) или (-inf; +inf).
            if (double.IsInfinity(from) || double.IsInfinity(to))
            {
                integralValue = IntegrateWithVariableChange(from, to, integrand);
            }

            return integralValue;
        }

        /// <summary>
        /// Вычисляет интеграл функции на заданном интервале с помощью замены переменной.
        /// </summary>
        /// <param name="from">Начало интервала интегрирования</param>
        /// <param name="to">Конец интервала интегрирования</param>
        /// <param name="integrand">Подынтегральная функция</param>
        /// <returns></returns>
        private static double IntegrateWithVariableChange(double from, double to, Func<double, double> integrand)
        {
            // Случай 1. Интеграл с бесконечным верхним пределом [a; +inf).
            var isInfiniteUpperLimit = !double.IsInfinity(from) && double.IsPositiveInfinity(to);
            if (isInfiniteUpperLimit)
            {
                return CalculateToPositiveInfinityIntegral(from, integrand);
            }

            // Случай 2. Интеграл с бесконечным нижним пределом (-inf; b].
            // Меняем пределы интегрирования местами: (-inf; b] -> [-b, +inf).
            // Подынтегральная функция f(x) заменяется на g(s), так что x=-s и g(s)=f(s).
            var isInfiniteLowerLimit = double.IsNegativeInfinity(from) && !double.IsInfinity(to);
            if (isInfiniteLowerLimit)
            {
                Func<double, double> newFunc = (x) => integrand(-x);

                var toPosInfIntegral = CalculateToPositiveInfinityIntegral((-1) * to, newFunc);
                return toPosInfIntegral;
            }

            // Случай 3. (-inf; +inf).

            return default;
        }

        /// <summary>
        /// Вычисляет интеграл с бесконечным верхним пределом [a; +inf).
        /// </summary>
        /// <param name="from"></param>
        /// <param name="integrand"></param>
        /// <returns></returns>
        private static double CalculateToPositiveInfinityIntegral(double from, Func<double, double> integrand)
        {
            // Если a < 0, то разбиваем интеграл на два по интервалам [a; 0] и [0; +inf).
            // Интеграл с пределами [0; +inf) вычисляется заменой переменной x = z / (1 - z) + 0,
            // причем после замены интеграл имеет пределы [0; 1].
            if (from < 0)
            {
                var funcAfterVariableChange = GetIntegrandAfterVariableChange(0, integrand);
                return IntegrateByGaussLegendreQuadrature(from, 0, integrand) + IntegrateByGaussLegendreQuadrature(0, 1, funcAfterVariableChange);
            }
            else // from >= 0
            {
                // Если a >= 0, то делаем замену переменной x = z / (1 - z) + a;
                var funcAfterVariableChange = GetIntegrandAfterVariableChange(from, integrand);
                return IntegrateByGaussLegendreQuadrature(0, 1, funcAfterVariableChange);
            }
        }

        private static Func<double, double> GetIntegrandAfterVariableChange(double from, Func<double, double> integrand)
        {
            return (z) => integrand((z / (1 - z)) + from) / Math.Pow(1 - z, 2);
        }

        /// <summary>
        /// Вычисляет интеграл с помощью квадратуры Гаусса-Лежандра
        /// </summary>
        /// <param name="a">Начало отрезка интегрирования</param>
        /// <param name="b">Конец отрезка интегрирования</param>
        /// <param name="function">Подынтегральная функция</param>
        /// <returns></returns>
        private static double IntegrateByGaussLegendreQuadrature(double a, double b, Func<double, double> function)
        {
            var n = 16; // количество точек
            var weights = new double[]
            {
                0.1894506104550684962853967232082831051469089883959029750375132452000228907691330063001339778335339522825338056432096423297083652175404007311690388189431844411595815612767118459616173498175974279783368912090196026294264906147293439818164037940618838412163450874403569646465188699526105009401,
    0.1894506104550684962853967232082831051469089883959029750375132452000228907691330063001339778335339522825338056432096423297083652175404007311690388189431844411595815612767118459616173498175974279783368912090196026294264906147293439818164037940618838412163450874403569646465188699526105009401,
    0.1826034150449235888667636679692199393835562236546492824184951443794304649501111749604004251169852753140450247468164720359323414531767503677231287901939855049593288980367779339835260945463293576871039381184643035967488751413022888111613573519788630660749465009519914881317048638180707164801,
    0.1826034150449235888667636679692199393835562236546492824184951443794304649501111749604004251169852753140450247468164720359323414531767503677231287901939855049593288980367779339835260945463293576871039381184643035967488751413022888111613573519788630660749465009519914881317048638180707164801,
    0.1691565193950025381893120790303599622116394734160282817450829356808036642099305309321553225420782280475616663029174311301070245194017485677345250958562776298891264277426735059304319847991653319152533740752257147529442896440995961657448930494413086332128490066363561659644970262910622840035,
    0.1691565193950025381893120790303599622116394734160282817450829356808036642099305309321553225420782280475616663029174311301070245194017485677345250958562776298891264277426735059304319847991653319152533740752257147529442896440995961657448930494413086332128490066363561659644970262910622840035,
    0.1495959888165767320815017305474785489704910682078364668054219621873604040204179824517786384030592580740666978710981552017441608823947804369332735108707683892775563858478598112791002547854739387534174159632646453366676666558524965031020211316827351475733089362794299590848309953779341872602,
    0.1495959888165767320815017305474785489704910682078364668054219621873604040204179824517786384030592580740666978710981552017441608823947804369332735108707683892775563858478598112791002547854739387534174159632646453366676666558524965031020211316827351475733089362794299590848309953779341872602,
    0.1246289712555338720524762821920164201448868592222026799447505904294109639214653535979691900176556843602150494472276923163298743356166759951219803027530793950381177302731194738185536484170853382049815857557341629265257965586456133775651283810710467884531826649993812111024573155970869490184,
    0.1246289712555338720524762821920164201448868592222026799447505904294109639214653535979691900176556843602150494472276923163298743356166759951219803027530793950381177302731194738185536484170853382049815857557341629265257965586456133775651283810710467884531826649993812111024573155970869490184,
    0.0951585116824927848099251076022462263552635031837126581568222872296317595776819594470249573208049864890125891496209414830603481210533228470521726818393631052313960626642025883937935575862183078092754984560926424378606161380726146645506474202051743093462038386816818873937323729463744264427,
    0.0951585116824927848099251076022462263552635031837126581568222872296317595776819594470249573208049864890125891496209414830603481210533228470521726818393631052313960626642025883937935575862183078092754984560926424378606161380726146645506474202051743093462038386816818873937323729463744264427,
    0.0622535239386478928628438369943776942749865083529068579013035158195357388870438190612117095368517345326677408437010587484095102733930688584375043469278735539030250578328671232854442125221885072444734914927471878528529881785852210014369332953413853555572557051831454875621973358414449964621,
    0.0622535239386478928628438369943776942749865083529068579013035158195357388870438190612117095368517345326677408437010587484095102733930688584375043469278735539030250578328671232854442125221885072444734914927471878528529881785852210014369332953413853555572557051831454875621973358414449964621,
    0.0271524594117540948517805724560181035122673755667607979906103190738041136642161732493257792290308808998974259954086067547083751974232521958283764526154679805418678763257877173475328975259417904071578049294517404669732770687128254946226155762176028585659082598276568361140612201745491935876,
    0.0271524594117540948517805724560181035122673755667607979906103190738041136642161732493257792290308808998974259954086067547083751974232521958283764526154679805418678763257877173475328975259417904071578049294517404669732770687128254946226155762176028585659082598276568361140612201745491935876
        };

            var arguments = new double[]
            {
                -0.0950125098376374401853193354249580631303530556890654566972198172251252982445921329847586929757833520996553912423163124483074773224487565507552825376683317590042639430675226808621968298306398385834094062354452738853673370952242716875153912021891680290435986783119557067235389351844245724875,
    0.0950125098376374401853193354249580631303530556890654566972198172251252982445921329847586929757833520996553912423163124483074773224487565507552825376683317590042639430675226808621968298306398385834094062354452738853673370952242716875153912021891680290435986783119557067235389351844245724875,
    -0.2816035507792589132304605014604961064860694907705998005488347339559251794991307704414402291520401592843373670756676799439586082317318595924277817407374616529972673172532181829993235047128041390568389016122167102956500177825088396891248315076199870306732893196077699300080783278160388268526,
    0.2816035507792589132304605014604961064860694907705998005488347339559251794991307704414402291520401592843373670756676799439586082317318595924277817407374616529972673172532181829993235047128041390568389016122167102956500177825088396891248315076199870306732893196077699300080783278160388268526,
    -0.4580167776572273863424194429835775735400316130355234909011547509477591742902936077354355279359880932508890488802524109819378387263875748374372456802481418656153209542267373920974363173240942222040312612330532653123205501204421111104074762176186316667057022346422007533674383870669928163176,
    0.4580167776572273863424194429835775735400316130355234909011547509477591742902936077354355279359880932508890488802524109819378387263875748374372456802481418656153209542267373920974363173240942222040312612330532653123205501204421111104074762176186316667057022346422007533674383870669928163176,
    -0.6178762444026437484466717640487910189918822177656577941037973555417333177548114244569110304279585031122000569275624151076936925727848010402595876903273247179517798914362511464102876638848562701414071395222427996580524502897074237462419393840518491384428806676527323585381078172060016106792,
    0.6178762444026437484466717640487910189918822177656577941037973555417333177548114244569110304279585031122000569275624151076936925727848010402595876903273247179517798914362511464102876638848562701414071395222427996580524502897074237462419393840518491384428806676527323585381078172060016106792,
    -0.7554044083550030338951011948474422683538136564575030097817571769222968610312716777206220569192494434216539226257757678979776951755606291644397833797722369885243242046906798866349950829217197588925310437168084369511369689261376271132103717538964348180234457737297258035338547704003530793529,
    0.7554044083550030338951011948474422683538136564575030097817571769222968610312716777206220569192494434216539226257757678979776951755606291644397833797722369885243242046906798866349950829217197588925310437168084369511369689261376271132103717538964348180234457737297258035338547704003530793529,
    -0.8656312023878317438804678977123931323873353848475267081035114255677603977124905582571324943647723542038214283313414643013860029908661750240618421060695691357885060000446425683961857266556079460930206564550102153241869468759866739066626836770199244933157211083365506097141892552664327847109,
    0.8656312023878317438804678977123931323873353848475267081035114255677603977124905582571324943647723542038214283313414643013860029908661750240618421060695691357885060000446425683961857266556079460930206564550102153241869468759866739066626836770199244933157211083365506097141892552664327847109,
    -0.9445750230732325760779884155346083450911392725910726009255536520666097889026823042195657287381583189493289311009073188864109526806102494798196007717799111788591676488419490727814170144843220494323478581257881972120927685699837677135359009690477976986581402819250512783872697998966630058366,
    0.9445750230732325760779884155346083450911392725910726009255536520666097889026823042195657287381583189493289311009073188864109526806102494798196007717799111788591676488419490727814170144843220494323478581257881972120927685699837677135359009690477976986581402819250512783872697998966630058366,
    -0.9894009349916499325961541734503326274262740716576451300512239047313241372158253969385364319067981810135134358598978665082530237078791797359303822324413999695095711078087727905307199080635719546126798380959938811380435009735652992230642464639938589347925375828009051127056909219223903533179,
    0.9894009349916499325961541734503326274262740716576451300512239047313241372158253969385364319067981810135134358598978665082530237078791797359303822324413999695095711078087727905307199080635719546126798380959938811380435009735652992230642464639938589347925375828009051127056909219223903533179
        };

            double integralValue = default;

            for (var i = 0; i < n; i++)
            {
                var transformedArg = (b + a) / 2 + ((b - a) / 2) * arguments[i];
                integralValue += weights[i] * function(transformedArg);
            }

            integralValue = ((b - a) / 2) * integralValue;

            return integralValue;
        }
    }
}
